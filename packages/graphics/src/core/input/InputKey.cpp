#include <graphics/core/input/InputKey.h>
#include <common/exceptions/IllegalArgumentException.h>
#include <GLFW/glfw3.h>

InputKey mapGLFWKey(int glfwKey)
{
	switch (glfwKey)
	{
		case GLFW_KEY_SPACE: return InputKey::KEY_SPACE;
		case GLFW_KEY_APOSTROPHE: return InputKey::KEY_APOSTROPHE;
		case GLFW_KEY_COMMA: return InputKey::KEY_COMMA;
		case GLFW_KEY_MINUS: return InputKey::KEY_MINUS;
		case GLFW_KEY_PERIOD: return InputKey::KEY_PERIOD;
		case GLFW_KEY_SLASH: return InputKey::KEY_SLASH;
		case GLFW_KEY_0: return InputKey::KEY_0;
		case GLFW_KEY_1: return InputKey::KEY_1;
		case GLFW_KEY_2: return InputKey::KEY_2;
		case GLFW_KEY_3: return InputKey::KEY_3;
		case GLFW_KEY_4: return InputKey::KEY_4;
		case GLFW_KEY_5: return InputKey::KEY_5;
		case GLFW_KEY_6: return InputKey::KEY_6;
		case GLFW_KEY_7: return InputKey::KEY_7;
		case GLFW_KEY_8: return InputKey::KEY_8;
		case GLFW_KEY_9: return InputKey::KEY_9;
		case GLFW_KEY_SEMICOLON: return InputKey::KEY_SEMICOLON;
		case GLFW_KEY_EQUAL: return InputKey::KEY_EQUAL;
		case GLFW_KEY_A: return InputKey::KEY_A;
		case GLFW_KEY_B: return InputKey::KEY_B;
		case GLFW_KEY_C: return InputKey::KEY_C;
		case GLFW_KEY_D: return InputKey::KEY_D;
		case GLFW_KEY_E: return InputKey::KEY_E;
		case GLFW_KEY_F: return InputKey::KEY_F;
		case GLFW_KEY_G: return InputKey::KEY_G;
		case GLFW_KEY_H: return InputKey::KEY_H;
		case GLFW_KEY_I: return InputKey::KEY_I;
		case GLFW_KEY_J: return InputKey::KEY_J;
		case GLFW_KEY_K: return InputKey::KEY_K;
		case GLFW_KEY_L: return InputKey::KEY_L;
		case GLFW_KEY_M: return InputKey::KEY_M;
		case GLFW_KEY_N: return InputKey::KEY_N;
		case GLFW_KEY_O: return InputKey::KEY_O;
		case GLFW_KEY_P: return InputKey::KEY_P;
		case GLFW_KEY_Q: return InputKey::KEY_Q;
		case GLFW_KEY_R: return InputKey::KEY_R;
		case GLFW_KEY_S: return InputKey::KEY_S;
		case GLFW_KEY_T: return InputKey::KEY_T;
		case GLFW_KEY_U: return InputKey::KEY_U;
		case GLFW_KEY_V: return InputKey::KEY_V;
		case GLFW_KEY_W: return InputKey::KEY_W;
		case GLFW_KEY_X: return InputKey::KEY_X;
		case GLFW_KEY_Y: return InputKey::KEY_Y;
		case GLFW_KEY_Z: return InputKey::KEY_Z;
		case GLFW_KEY_LEFT_BRACKET: return InputKey::KEY_LEFT_BRACKET;
		case GLFW_KEY_BACKSLASH: return InputKey::KEY_BACKSLASH;
		case GLFW_KEY_RIGHT_BRACKET: return InputKey::KEY_RIGHT_BRACKET;
		case GLFW_KEY_GRAVE_ACCENT: return InputKey::KEY_GRAVE_ACCENT;
		case GLFW_KEY_WORLD_1: return InputKey::KEY_WORLD_1;
		case GLFW_KEY_WORLD_2: return InputKey::KEY_WORLD_2;
		case GLFW_KEY_ESCAPE: return InputKey::KEY_ESCAPE;
		case GLFW_KEY_ENTER: return InputKey::KEY_ENTER;
		case GLFW_KEY_TAB: return InputKey::KEY_TAB;
		case GLFW_KEY_BACKSPACE: return InputKey::KEY_BACKSPACE;
		case GLFW_KEY_INSERT: return InputKey::KEY_INSERT;
		case GLFW_KEY_DELETE: return InputKey::KEY_DELETE;
		case GLFW_KEY_RIGHT: return InputKey::KEY_RIGHT;
		case GLFW_KEY_LEFT: return InputKey::KEY_LEFT;
		case GLFW_KEY_DOWN: return InputKey::KEY_DOWN;
		case GLFW_KEY_UP: return InputKey::KEY_UP;
		case GLFW_KEY_PAGE_UP: return InputKey::KEY_PAGE_UP;
		case GLFW_KEY_PAGE_DOWN: return InputKey::KEY_PAGE_DOWN;
		case GLFW_KEY_HOME: return InputKey::KEY_HOME;
		case GLFW_KEY_END: return InputKey::KEY_END;
		case GLFW_KEY_CAPS_LOCK: return InputKey::KEY_CAPS_LOCK;
		case GLFW_KEY_SCROLL_LOCK: return InputKey::KEY_SCROLL_LOCK;
		case GLFW_KEY_NUM_LOCK: return InputKey::KEY_NUM_LOCK;
		case GLFW_KEY_PRINT_SCREEN: return InputKey::KEY_PRINT_SCREEN;
		case GLFW_KEY_PAUSE: return InputKey::KEY_PAUSE;
		case GLFW_KEY_F1: return InputKey::KEY_F1;
		case GLFW_KEY_F2: return InputKey::KEY_F2;
		case GLFW_KEY_F3: return InputKey::KEY_F3;
		case GLFW_KEY_F4: return InputKey::KEY_F4;
		case GLFW_KEY_F5: return InputKey::KEY_F5;
		case GLFW_KEY_F6: return InputKey::KEY_F6;
		case GLFW_KEY_F7: return InputKey::KEY_F7;
		case GLFW_KEY_F8: return InputKey::KEY_F8;
		case GLFW_KEY_F9: return InputKey::KEY_F9;
		case GLFW_KEY_F10: return InputKey::KEY_F10;
		case GLFW_KEY_F11: return InputKey::KEY_F11;
		case GLFW_KEY_F12: return InputKey::KEY_F12;
		case GLFW_KEY_F13: return InputKey::KEY_F13;
		case GLFW_KEY_F14: return InputKey::KEY_F14;
		case GLFW_KEY_F15: return InputKey::KEY_F15;
		case GLFW_KEY_F16: return InputKey::KEY_F16;
		case GLFW_KEY_F17: return InputKey::KEY_F17;
		case GLFW_KEY_F18: return InputKey::KEY_F18;
		case GLFW_KEY_F19: return InputKey::KEY_F19;
		case GLFW_KEY_F20: return InputKey::KEY_F20;
		case GLFW_KEY_F21: return InputKey::KEY_F21;
		case GLFW_KEY_F22: return InputKey::KEY_F22;
		case GLFW_KEY_F23: return InputKey::KEY_F23;
		case GLFW_KEY_F24: return InputKey::KEY_F24;
		case GLFW_KEY_F25: return InputKey::KEY_F25;
		case GLFW_KEY_KP_0: return InputKey::KEY_NUMPAD_0;
		case GLFW_KEY_KP_1: return InputKey::KEY_NUMPAD_1;
		case GLFW_KEY_KP_2: return InputKey::KEY_NUMPAD_2;
		case GLFW_KEY_KP_3: return InputKey::KEY_NUMPAD_3;
		case GLFW_KEY_KP_4: return InputKey::KEY_NUMPAD_4;
		case GLFW_KEY_KP_5: return InputKey::KEY_NUMPAD_5;
		case GLFW_KEY_KP_6: return InputKey::KEY_NUMPAD_6;
		case GLFW_KEY_KP_7: return InputKey::KEY_NUMPAD_7;
		case GLFW_KEY_KP_8: return InputKey::KEY_NUMPAD_8;
		case GLFW_KEY_KP_9: return InputKey::KEY_NUMPAD_9;
		case GLFW_KEY_KP_DECIMAL: return InputKey::KEY_NUMPAD_DECIMAL;
		case GLFW_KEY_KP_DIVIDE: return InputKey::KEY_NUMPAD_DIVIDE;
		case GLFW_KEY_KP_MULTIPLY: return InputKey::KEY_NUMPAD_MULTIPLY;
		case GLFW_KEY_KP_SUBTRACT: return InputKey::KEY_NUMPAD_SUBTRACT;
		case GLFW_KEY_KP_ADD: return InputKey::KEY_NUMPAD_ADD;
		case GLFW_KEY_KP_ENTER: return InputKey::KEY_NUMPAD_ENTER;
		case GLFW_KEY_KP_EQUAL: return InputKey::KEY_NUMPAD_EQUAL;
		case GLFW_KEY_LEFT_SHIFT: return InputKey::KEY_LEFT_SHIFT;
		case GLFW_KEY_LEFT_CONTROL: return InputKey::KEY_LEFT_CONTROL;
		case GLFW_KEY_LEFT_ALT: return InputKey::KEY_LEFT_ALT;
		case GLFW_KEY_LEFT_SUPER: return InputKey::KEY_LEFT_SUPER;
		case GLFW_KEY_RIGHT_SHIFT: return InputKey::KEY_RIGHT_SHIFT;
		case GLFW_KEY_RIGHT_CONTROL: return InputKey::KEY_RIGHT_CONTROL;
		case GLFW_KEY_RIGHT_ALT: return InputKey::KEY_RIGHT_ALT;
		case GLFW_KEY_RIGHT_SUPER: return InputKey::KEY_RIGHT_SUPER;
		case GLFW_KEY_MENU: return InputKey::KEY_MENU;
		default: throw IllegalArgumentException("Could not map input key to GLFW value");
	}
}