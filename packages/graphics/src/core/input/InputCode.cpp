#include <graphics/core/input/InputCode.h>
#include <common/exceptions/IllegalArgumentException.h>
#include <GLFW/glfw3.h>

int mapInputCode(const InputCode& code)
{
	switch (code)
	{
		case InputCode::KEY_SPACE: return GLFW_KEY_SPACE;
		case InputCode::KEY_APOSTROPHE: return GLFW_KEY_APOSTROPHE;
		case InputCode::KEY_COMMA: return GLFW_KEY_COMMA;
		case InputCode::KEY_MINUS: return GLFW_KEY_MINUS;
		case InputCode::KEY_PERIOD: return GLFW_KEY_PERIOD;
		case InputCode::KEY_SLASH: return GLFW_KEY_SLASH;
		case InputCode::KEY_0: return GLFW_KEY_0;
		case InputCode::KEY_1: return GLFW_KEY_1;
		case InputCode::KEY_2: return GLFW_KEY_2;
		case InputCode::KEY_3: return GLFW_KEY_3;
		case InputCode::KEY_4: return GLFW_KEY_4;
		case InputCode::KEY_5: return GLFW_KEY_5;
		case InputCode::KEY_6: return GLFW_KEY_6;
		case InputCode::KEY_7: return GLFW_KEY_7;
		case InputCode::KEY_8: return GLFW_KEY_8;
		case InputCode::KEY_9: return GLFW_KEY_9;
		case InputCode::KEY_SEMICOLON: return GLFW_KEY_SEMICOLON;
		case InputCode::KEY_EQUAL: return GLFW_KEY_EQUAL;
		case InputCode::KEY_A: return GLFW_KEY_A;
		case InputCode::KEY_B: return GLFW_KEY_B;
		case InputCode::KEY_C: return GLFW_KEY_C;
		case InputCode::KEY_D: return GLFW_KEY_D;
		case InputCode::KEY_E: return GLFW_KEY_E;
		case InputCode::KEY_F: return GLFW_KEY_F;
		case InputCode::KEY_G: return GLFW_KEY_G;
		case InputCode::KEY_H: return GLFW_KEY_H;
		case InputCode::KEY_I: return GLFW_KEY_I;
		case InputCode::KEY_J: return GLFW_KEY_J;
		case InputCode::KEY_K: return GLFW_KEY_K;
		case InputCode::KEY_L: return GLFW_KEY_L;
		case InputCode::KEY_M: return GLFW_KEY_M;
		case InputCode::KEY_N: return GLFW_KEY_N;
		case InputCode::KEY_O: return GLFW_KEY_O;
		case InputCode::KEY_P: return GLFW_KEY_P;
		case InputCode::KEY_Q: return GLFW_KEY_Q;
		case InputCode::KEY_R: return GLFW_KEY_R;
		case InputCode::KEY_S: return GLFW_KEY_S;
		case InputCode::KEY_T: return GLFW_KEY_T;
		case InputCode::KEY_U: return GLFW_KEY_U;
		case InputCode::KEY_V: return GLFW_KEY_V;
		case InputCode::KEY_W: return GLFW_KEY_W;
		case InputCode::KEY_X: return GLFW_KEY_X;
		case InputCode::KEY_Y: return GLFW_KEY_Y;
		case InputCode::KEY_Z: return GLFW_KEY_Z;
		case InputCode::KEY_LEFT_BRACKET: return GLFW_KEY_LEFT_BRACKET;
		case InputCode::KEY_BACKSLASH: return GLFW_KEY_BACKSLASH;
		case InputCode::KEY_RIGHT_BRACKET: return GLFW_KEY_RIGHT_BRACKET;
		case InputCode::KEY_GRAVE_ACCENT: return GLFW_KEY_GRAVE_ACCENT;
		case InputCode::KEY_WORLD_1: return GLFW_KEY_WORLD_1;
		case InputCode::KEY_WORLD_2: return GLFW_KEY_WORLD_2;
		case InputCode::KEY_ESCAPE: return GLFW_KEY_ESCAPE;
		case InputCode::KEY_ENTER: return GLFW_KEY_ENTER;
		case InputCode::KEY_TAB: return GLFW_KEY_TAB;
		case InputCode::KEY_BACKSPACE: return GLFW_KEY_BACKSPACE;
		case InputCode::KEY_INSERT: return GLFW_KEY_INSERT;
		case InputCode::KEY_DELETE: return GLFW_KEY_DELETE;
		case InputCode::KEY_RIGHT: return GLFW_KEY_RIGHT;
		case InputCode::KEY_LEFT: return GLFW_KEY_LEFT;
		case InputCode::KEY_DOWN: return GLFW_KEY_DOWN;
		case InputCode::KEY_UP: return GLFW_KEY_UP;
		case InputCode::KEY_PAGE_UP: return GLFW_KEY_PAGE_UP;
		case InputCode::KEY_PAGE_DOWN: return GLFW_KEY_PAGE_DOWN;
		case InputCode::KEY_HOME: return GLFW_KEY_HOME;
		case InputCode::KEY_END: return GLFW_KEY_END;
		case InputCode::KEY_CAPS_LOCK: return GLFW_KEY_CAPS_LOCK;
		case InputCode::KEY_SCROLL_LOCK: return GLFW_KEY_SCROLL_LOCK;
		case InputCode::KEY_NUM_LOCK: return GLFW_KEY_NUM_LOCK;
		case InputCode::KEY_PRINT_SCREEN: return GLFW_KEY_PRINT_SCREEN;
		case InputCode::KEY_PAUSE: return GLFW_KEY_PAUSE;
		case InputCode::KEY_F1: return GLFW_KEY_F1;
		case InputCode::KEY_F2: return GLFW_KEY_F2;
		case InputCode::KEY_F3: return GLFW_KEY_F3;
		case InputCode::KEY_F4: return GLFW_KEY_F4;
		case InputCode::KEY_F5: return GLFW_KEY_F5;
		case InputCode::KEY_F6: return GLFW_KEY_F6;
		case InputCode::KEY_F7: return GLFW_KEY_F7;
		case InputCode::KEY_F8: return GLFW_KEY_F8;
		case InputCode::KEY_F9: return GLFW_KEY_F9;
		case InputCode::KEY_F10: return GLFW_KEY_F10;
		case InputCode::KEY_F11: return GLFW_KEY_F11;
		case InputCode::KEY_F12: return GLFW_KEY_F12;
		case InputCode::KEY_F13: return GLFW_KEY_F13;
		case InputCode::KEY_F14: return GLFW_KEY_F14;
		case InputCode::KEY_F15: return GLFW_KEY_F15;
		case InputCode::KEY_F16: return GLFW_KEY_F16;
		case InputCode::KEY_F17: return GLFW_KEY_F17;
		case InputCode::KEY_F18: return GLFW_KEY_F18;
		case InputCode::KEY_F19: return GLFW_KEY_F19;
		case InputCode::KEY_F20: return GLFW_KEY_F20;
		case InputCode::KEY_F21: return GLFW_KEY_F21;
		case InputCode::KEY_F22: return GLFW_KEY_F22;
		case InputCode::KEY_F23: return GLFW_KEY_F23;
		case InputCode::KEY_F24: return GLFW_KEY_F24;
		case InputCode::KEY_F25: return GLFW_KEY_F25;
		case InputCode::KEY_NUMPAD_0: return GLFW_KEY_KP_0;
		case InputCode::KEY_NUMPAD_1: return GLFW_KEY_KP_1;
		case InputCode::KEY_NUMPAD_2: return GLFW_KEY_KP_2;
		case InputCode::KEY_NUMPAD_3: return GLFW_KEY_KP_3;
		case InputCode::KEY_NUMPAD_4: return GLFW_KEY_KP_4;
		case InputCode::KEY_NUMPAD_5: return GLFW_KEY_KP_5;
		case InputCode::KEY_NUMPAD_6: return GLFW_KEY_KP_6;
		case InputCode::KEY_NUMPAD_7: return GLFW_KEY_KP_7;
		case InputCode::KEY_NUMPAD_8: return GLFW_KEY_KP_8;
		case InputCode::KEY_NUMPAD_9: return GLFW_KEY_KP_9;
		case InputCode::KEY_NUMPAD_DECIMAL: return GLFW_KEY_KP_DECIMAL;
		case InputCode::KEY_NUMPAD_DIVIDE: return GLFW_KEY_KP_DIVIDE;
		case InputCode::KEY_NUMPAD_MULTIPLY: return GLFW_KEY_KP_MULTIPLY;
		case InputCode::KEY_NUMPAD_SUBTRACT: return GLFW_KEY_KP_SUBTRACT;
		case InputCode::KEY_NUMPAD_ADD: return GLFW_KEY_KP_ADD;
		case InputCode::KEY_NUMPAD_ENTER: return GLFW_KEY_KP_ENTER;
		case InputCode::KEY_NUMPAD_EQUAL: return GLFW_KEY_KP_EQUAL;
		case InputCode::KEY_LEFT_SHIFT: return GLFW_KEY_LEFT_SHIFT;
		case InputCode::KEY_LEFT_CONTROL: return GLFW_KEY_LEFT_CONTROL;
		case InputCode::KEY_LEFT_ALT: return GLFW_KEY_LEFT_ALT;
		case InputCode::KEY_LEFT_SUPER: return GLFW_KEY_LEFT_SUPER;
		case InputCode::KEY_RIGHT_SHIFT: return GLFW_KEY_RIGHT_SHIFT;
		case InputCode::KEY_RIGHT_CONTROL: return GLFW_KEY_RIGHT_CONTROL;
		case InputCode::KEY_RIGHT_ALT: return GLFW_KEY_RIGHT_ALT;
		case InputCode::KEY_RIGHT_SUPER: return GLFW_KEY_RIGHT_SUPER;
		case InputCode::KEY_MENU: return GLFW_KEY_MENU;
		case InputCode::KEY_LAST: return GLFW_KEY_MENU;

		default: throw IllegalArgumentException("Could not map input code to GLFW value");
	}
}